////////////////////////////////////////////////////////////////////////////
//
// FlashCap - Independent camera capture library.
// Copyright (c) Kouji Matsui (@kozy_kekyo, @kekyo@mastodon.cloud)
//
// Licensed under Apache-v2: https://opensource.org/licenses/Apache-2.0
//
////////////////////////////////////////////////////////////////////////////

using Newtonsoft.Json;
using System.Collections.Generic;
using System.IO;

// Generated by https://json2csharp.com/ and fixed.

namespace FlashCap
{
    // Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse);
    public sealed class Loc
    {
        [JsonConstructor]
        public Loc(
            int offset,
            string file,
            int line,
            int col,
            int tokLen)
        {
            this.offset = offset;
            this.file = file;
            this.line = line;
            this.col = col;
            this.tokLen = tokLen;
        }

        public int offset { get; }
        public string file { get; }
        public int line { get; }
        public int col { get; }
        public int tokLen { get; }

        public override string ToString() =>
            $"{Path.GetFileName(this.file)}({this.line},{this.col})";
    }

    public sealed class Point
    {
        public Point(
            int offset,
            int? line,
            int col,
            int tokLen)
        {
            this.offset = offset;
            this.line = line;
            this.col = col;
            this.tokLen = tokLen;
        }

        public int offset { get; }
        public int? line { get; }
        public int col { get; }
        public int tokLen { get; }

    }

    public sealed class Range
    {
        [JsonConstructor]
        public Range(
            Point begin,
            Point end
        )
        {
            this.begin = begin;
            this.end = end;
        }

        public Point begin { get; }
        public Point end { get; }
    }

    public sealed class Type
    {
        [JsonConstructor]
        public Type(
            string qualType
        )
        {
            this.qualType = qualType;
        }

        public string qualType { get; }
    }

    public sealed class Decl
    {
        [JsonConstructor]
        public Decl(
            string id,
            string kind,
            string name
        )
        {
            this.id = id;
            this.kind = kind;
            this.name = name;
        }

        public string id { get; }
        public string kind { get; }
        public string name { get; }
    }

    public sealed class Inner
    {
        [JsonConstructor]
        public Inner(
            string id,
            string kind,
            Type type,
            Decl decl,
            Loc loc,
            Range range,
            bool isImplicit,
            bool isReferenced,
            bool completeDefinition,
            string tagUsed,
            string name,
            string valueCategory,
            string value,
            List<Inner> inner
        )
        {
            this.id = id;
            this.kind = kind;
            this.type = type;
            this.decl = decl;
            this.loc = loc;
            this.range = range;
            this.isImplicit = isImplicit;
            this.isReferenced = isReferenced;
            this.completeDefinition = completeDefinition;
            this.tagUsed = tagUsed;
            this.name = name;
            this.valueCategory = valueCategory;
            this.value = value;
            this.inner = inner;
        }

        public string id { get; }
        public string kind { get; }
        public Type type { get; }
        public Decl decl { get; }
        public Loc loc { get; }
        public Range range { get; }
        public bool isImplicit { get; }
        public bool isReferenced { get; }
        public bool completeDefinition { get; }
        public string tagUsed { get; }
        public string name { get; }
        public string value { get; }
        public string valueCategory { get; }
        public IReadOnlyList<Inner> inner { get; }

        public bool IsIn(Loc loc, Range range)
        {
            var lhsBeginLine = this.range.begin.line ?? this.loc.line;
            var lhsEndLine = this.range.end.line ?? this.loc.line;
            var rhsBeginLine = range.begin.line ?? loc.line;
            var rhsEndLine = range.end.line ?? loc.line;

            return
                rhsBeginLine >= lhsBeginLine &&
                rhsEndLine <= lhsEndLine;
        }

        public override string ToString()
        {
            if (this.type != null)
            {
                return string.Format("{0}: {1} {2}{3}",
                    this.loc?.ToString() ?? "(0,0)",
                    this.type.qualType,
                    this.name != null ?
                        this.name :
                        (this.kind != null ?
                            ("[" + this.kind + "]") :
                            "(unknown)"),
                    this.value != null ?
                        (" = " + this.value) :
                        ((this.inner?.Count ?? 0) >= 2 ?
                            " { ... }" :
                            ""));
            }
            else if (this.kind != null)
            {
                return string.Format("{0}: [{1}] {2}{3}",
                    this.loc?.ToString() ?? "(0,0)",
                    this.kind,
                    this.name != null ? this.name : "(unknown)",
                    this.value != null ?
                        (" = " + this.value) :
                        ((this.inner?.Count ?? 0) >= 2 ?
                            " { ... }" :
                            ""));
            }
            else
            {
                return string.Format("{0}: (unknown){1}",
                    this.loc?.ToString() ?? "(0,0)",
                    this.value != null ?
                        (" = " + this.value) :
                        ((this.inner?.Count ?? 0) >= 2 ?
                            " { ... }" :
                            ""));
            }
        }
    }

    public sealed class ClangASTJsonRoot
    {
        [JsonConstructor]
        public ClangASTJsonRoot(
            string id,
            string kind,
            Loc loc,
            Range range,
            List<Inner> inner
        )
        {
            this.id = id;
            this.kind = kind;
            this.loc = loc;
            this.range = range;
            this.inner = inner;
        }

        public string id { get; }
        public string kind { get; }
        public Loc loc { get; }
        public Range range { get; }
        public IReadOnlyList<Inner> inner { get; }
    }
}
